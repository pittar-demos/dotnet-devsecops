# This policy installs the Advanced Cluster Security Operator on the ACM hub
# cluster and it create the Central Server.
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: acs-cicd-token-secret-policy
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: acs-cicd-token-secret-policy-configmap
      spec:
        remediationAction: inform
        severity: high
        object-templates:
          - complianceType: musthave
            objectDefinition:
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: create-roxsecrets
                namespace: stackrox
          - complianceType: musthave
            objectDefinition:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                annotations:
                  argocd.argoproj.io/sync-wave: "1"
                name: create-roxsecrets
                namespace: stackrox
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - secrets
                  verbs:
                    - get
                    - create
                - apiGroups:
                    - ""
                  resources:
                    - namespaces
                  verbs:
                    - get
          - complianceType: musthave
            objectDefinition:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: create-roxsecrets
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: create-roxsecrets
              subjects:
                - kind: ServiceAccount
                  name: create-roxsecrets
                  namespace: stackrox
          - complianceType: musthave
            objectDefinition:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: roxsecret-namespaces
                namespace: stackrox
              data:
                NAMESPACES: stackrox
                CENTRAL_URL: central.stackrox.svc
          - complianceType: musthave
            objectDefinition:
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: create-roxsecrets-job
                namespace: stackrox
              spec:
                template:
                  spec:
                    containers:
                      - image: quay.io/gnunn/tools:4.10-1
                        env:
                        - name: PASSWORD
                          valueFrom:
                            secretKeyRef:
                              key: password
                              name: central-htpasswd
                        envFrom:
                        - configMapRef:
                            name: roxsecret-namespaces
                        command:
                        - /bin/bash
                        - -c
                        - |
                          # Wait for central to be ready
                          attempt_counter=0
                          max_attempts=20
                          echo "Waiting for central to be available..."
                          until $(curl -k --output /dev/null --silent --head --fail https://$CENTRAL_URL); do
                            if [ ${attempt_counter} -eq ${max_attempts} ];then
                              echo "Max attempts reached"
                              exit 1
                            fi
                            printf '.'
                            attempt_counter=$(($attempt_counter+1))
                            echo "Made attempt $attempt_counter, waiting..."
                            sleep 10
                          done

                          API_ENDPOINT="/v1/apitokens/generate"
                          CENTRAL_URL_API="https://$CENTRAL_URL$API_ENDPOINT"
                          echo "Central API endpoint: $CENTRAL_URL_API"
                          echo "Creating secrets in namespaces $NAMESPACES"

                          for NAMESPACE in ${NAMESPACES//,/ }
                          do
                            echo "Creating secret for $NAMESPACE"
                            if [[ `oc get namespace $NAMESPACE 2>/dev/null` ]] ;
                            then
                                echo "Namespace '$NAMESPACE' exists, checking secret..."
                            else
                                echo "Namespace '$NAMESPACE' doesn't exist, skipping"
                                continue
                            fi

                            # If secret already exists, don't regenerate.
                            if [[ -n `oc get secret roxsecrets -n $NAMESPACE 2>/dev/null` ]] ;
                            then
                                echo "Stackrox token secret already exists in $NAMESPACE"
                                continue
                            fi
                            PAYLOAD="{\"name\": \"$NAMESPACE\", \"role\": \"Continuous Integration\"}"
                            echo "$PAYLOAD"
                            echo "Generate new token."
                            RESPONSE=$(curl -k \
                              -X POST -u "admin:$PASSWORD" \
                              -H "Content-Type: application/json" \
                              --data "$PAYLOAD" \
                              $CENTRAL_URL_API)
                            TOKEN=$(jq -r '.token' <<< "$RESPONSE")

                            # Create secret in target namespace
                            oc create secret generic roxsecrets \
                              --from-literal=rox_central_endpoint=$CENTRAL_URL:443 \
                              --from-literal=rox_api_token=$TOKEN \
                              -n $NAMESPACE
                          done
                        name: create-secrets
                    dnsPolicy: ClusterFirst
                    restartPolicy: Never
                    terminationGracePeriodSeconds: 30
                    serviceAccount: create-roxsecrets
                    serviceAccountName: create-roxsecrets
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: acs-clustertasks
      spec:
        remediationAction: inform
        severity: high
        object-templates:
          - complianceType: musthave
            objectDefinition:
              apiVersion: tekton.dev/v1beta1
              kind: ClusterTask
              metadata:
                name: acs-image-scan
              spec:
                params:
                  - name: image
                    type: string
                    description: Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
                  - name: output_format
                    type: string
                    description:  Output format (json | csv | table )
                    default: json
                workspaces:
                  - name: acs-central
                    description: The secret with the central endpoint (rox-central_endpoint) and api token (rox_api_token)
                    optional: true
                steps:
                  - name: rox-image-scan
                    image: registry.redhat.io/advanced-cluster-security/rhacs-roxctl-rhel8:3.70
                    script: |
                      #!/usr/bin/env bash
                      set +x

                      if [ $(workspaces.acs-central.bound) == "false" ] ; then
                        echo "No acs-central workspace was bound to task"
                        exit 0
                      fi

                      export ROX_CENTRAL_ENDPOINT=$(cat $(workspaces.acs-central.path)/rox_central_endpoint)
                      export ROX_API_TOKEN=$(cat $(workspaces.acs-central.path)/rox_api_token)

                      echo "Scanning against endpoint ${ROX_CENTRAL_ENDPOINT}"

                      export NO_COLOR="True"

                      echo "Scanning image: $(params.image)"

                      roxctl image scan --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT --image $(params.image) --output $(params.output_format)
          - complianceType: musthave
            objectDefinition:
              apiVersion: tekton.dev/v1beta1
              kind: ClusterTask
              metadata:
                name: acs-image-check
              spec:
                params:
                  - name: image
                    type: string
                    description: Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
                results:
                    - name: check_passed
                      description: Whether the task passed or failed, "true" for a pass, "false" for a fail.
                workspaces:
                  - name: acs-central
                    description: The secret with the central endpoint (acs-central_endpoint) and api token (acs_api_token)
                    optional: true
                steps:
                  - name: rox-image-check
                    image: registry.redhat.io/advanced-cluster-security/rhacs-roxctl-rhel8:3.70
                    script: |
                      #!/usr/bin/env bash
                      set +x

                      if [ $(workspaces.acs-central.bound) == "false" ] ; then
                        echo "No acs-central workspace was bound to task"
                        exit 0
                      fi

                      export ROX_CENTRAL_ENDPOINT=$(cat $(workspaces.acs-central.path)/rox_central_endpoint)
                      export ROX_API_TOKEN=$(cat $(workspaces.acs-central.path)/rox_api_token)

                      echo "Scanning against endpoint ${ROX_CENTRAL_ENDPOINT}"

                      if roxctl image check --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT --image $(params.image); then
                        echo -n "true" > $(results.check_passed.path)
                      else
                        echo -n "false" > $(results.check_passed.path)
                      fi
                      cd .
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-acs-cicd-token-secret-policy
placementRef:
  name: placement-acs-cicd-token-secret-policy
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
- name: acs-cicd-token-secret-policy
  kind: Policy
  apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-acs-cicd-token-secret-policy
spec:
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - key: devsecops
        operator: In
        values:
          - "true"